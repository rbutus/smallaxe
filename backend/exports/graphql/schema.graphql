type About {
  id: ID!
  created_at: DateTime!
  updated_at: DateTime!
  description: String
  created_by: AdminUser
  updated_by: AdminUser
}

type AboutAggregator {
  count: Int
  totalCount: Int
}

type AboutConnection {
  values: [About]
  groupBy: AboutGroupBy
  aggregate: AboutAggregator
}

type AboutConnectionCreated_at {
  key: DateTime
  connection: AboutConnection
}

type AboutConnectionCreated_by {
  key: ID
  connection: AboutConnection
}

type AboutConnectionDescription {
  key: String
  connection: AboutConnection
}

type AboutConnectionId {
  key: ID
  connection: AboutConnection
}

type AboutConnectionUpdated_at {
  key: DateTime
  connection: AboutConnection
}

type AboutConnectionUpdated_by {
  key: ID
  connection: AboutConnection
}

type AboutGroupBy {
  id: [AboutConnectionId]
  created_at: [AboutConnectionCreated_at]
  updated_at: [AboutConnectionUpdated_at]
  description: [AboutConnectionDescription]
  created_by: [AboutConnectionCreated_by]
  updated_by: [AboutConnectionUpdated_by]
}

input AboutInput {
  description: String
  created_by: ID
  updated_by: ID
}

type AdminUser {
  id: ID!
  username: String
}

input createAboutInput {
  data: AboutInput
}

type createAboutPayload {
  about: About
}

input createMenuBreakfastItemInput {
  data: MenuBreakfastItemInput
}

type createMenuBreakfastItemPayload {
  menuBreakfastItem: MenuBreakfastItem
}

input createMenuRegularItemInput {
  data: MenuRegularItemInput
}

type createMenuRegularItemPayload {
  menuRegularItem: MenuRegularItems
}

input createRoleInput {
  data: RoleInput
}

type createRolePayload {
  role: UsersPermissionsRole
}

input createUserInput {
  data: UserInput
}

type createUserPayload {
  user: UsersPermissionsUser
}

"""
A date string, such as 2007-12-03, compliant with the `full-date` format
outlined in section 5.6 of the RFC 3339 profile of the ISO 8601 standard for
representation of dates and times using the Gregorian calendar.
"""
scalar Date

"""
A date-time string at UTC, such as 2007-12-03T10:15:30Z, compliant with the
`date-time` format outlined in section 5.6 of the RFC 3339 profile of the ISO
8601 standard for representation of dates and times using the Gregorian calendar.
"""
scalar DateTime

input deleteAboutInput {
  where: InputID
}

type deleteAboutPayload {
  about: About
}

type deleteLogoPayload {
  logo: Logo
}

input deleteMenuBreakfastItemInput {
  where: InputID
}

type deleteMenuBreakfastItemPayload {
  menuBreakfastItem: MenuBreakfastItem
}

input deleteMenuRegularItemInput {
  where: InputID
}

type deleteMenuRegularItemPayload {
  menuRegularItem: MenuRegularItems
}

input deleteRoleInput {
  where: InputID
}

type deleteRolePayload {
  role: UsersPermissionsRole
}

input deleteUserInput {
  where: InputID
}

type deleteUserPayload {
  user: UsersPermissionsUser
}

input editAboutInput {
  description: String
  created_by: ID
  updated_by: ID
}

input editFileInput {
  name: String
  alternativeText: String
  caption: String
  width: Int
  height: Int
  formats: JSON
  hash: String
  ext: String
  mime: String
  size: Float
  url: String
  previewUrl: String
  provider: String
  provider_metadata: JSON
  related: [ID]
  created_by: ID
  updated_by: ID
}

input editLogoInput {
  image: [ID]
  created_by: ID
  updated_by: ID
}

input editMenuBreakfastItemInput {
  item: String
  description: String
  price: Float
  photo: [ID]
  created_by: ID
  updated_by: ID
}

input editMenuRegularItemInput {
  item: String
  description: String
  price: Float
  photo: [ID]
  created_by: ID
  updated_by: ID
}

input editRoleInput {
  name: String
  description: String
  type: String
  permissions: [ID]
  users: [ID]
  created_by: ID
  updated_by: ID
}

input editUserInput {
  username: String
  email: String
  provider: String
  password: String
  resetPasswordToken: String
  confirmed: Boolean
  blocked: Boolean
  role: ID
  created_by: ID
  updated_by: ID
}

input FileInfoInput {
  name: String
  alternativeText: String
  caption: String
}

input FileInput {
  name: String!
  alternativeText: String
  caption: String
  width: Int
  height: Int
  formats: JSON
  hash: String!
  ext: String
  mime: String!
  size: Float!
  url: String!
  previewUrl: String
  provider: String!
  provider_metadata: JSON
  related: [ID]
  created_by: ID
  updated_by: ID
}

input InputID {
  id: ID!
}

"""
The `JSON` scalar type represents JSON values as specified by [ECMA-404](http://www.ecma-international.org/publications/files/ECMA-ST/ECMA-404.pdf).
"""
scalar JSON

type Logo {
  id: ID!
  created_at: DateTime!
  updated_at: DateTime!
  created_by: AdminUser
  updated_by: AdminUser
  image(sort: String, limit: Int, start: Int, where: JSON): [UploadFile]
}

input LogoInput {
  image: [ID]
  created_by: ID
  updated_by: ID
}

"""The `Long` scalar type represents 52-bit integers"""
scalar Long

type MenuBreakfastItem {
  id: ID!
  created_at: DateTime!
  updated_at: DateTime!
  item: String
  description: String
  price: Float
  created_by: AdminUser
  updated_by: AdminUser
  photo(sort: String, limit: Int, start: Int, where: JSON): [UploadFile]
}

type MenuBreakfastItemAggregator {
  count: Int
  totalCount: Int
  sum: MenuBreakfastItemAggregatorSum
  avg: MenuBreakfastItemAggregatorAvg
  min: MenuBreakfastItemAggregatorMin
  max: MenuBreakfastItemAggregatorMax
}

type MenuBreakfastItemAggregatorAvg {
  price: Float
}

type MenuBreakfastItemAggregatorMax {
  price: Float
}

type MenuBreakfastItemAggregatorMin {
  price: Float
}

type MenuBreakfastItemAggregatorSum {
  price: Float
}

type MenuBreakfastItemConnection {
  values: [MenuBreakfastItem]
  groupBy: MenuBreakfastItemGroupBy
  aggregate: MenuBreakfastItemAggregator
}

type MenuBreakfastItemConnectionCreated_at {
  key: DateTime
  connection: MenuBreakfastItemConnection
}

type MenuBreakfastItemConnectionCreated_by {
  key: ID
  connection: MenuBreakfastItemConnection
}

type MenuBreakfastItemConnectionDescription {
  key: String
  connection: MenuBreakfastItemConnection
}

type MenuBreakfastItemConnectionId {
  key: ID
  connection: MenuBreakfastItemConnection
}

type MenuBreakfastItemConnectionItem {
  key: String
  connection: MenuBreakfastItemConnection
}

type MenuBreakfastItemConnectionPrice {
  key: Float
  connection: MenuBreakfastItemConnection
}

type MenuBreakfastItemConnectionUpdated_at {
  key: DateTime
  connection: MenuBreakfastItemConnection
}

type MenuBreakfastItemConnectionUpdated_by {
  key: ID
  connection: MenuBreakfastItemConnection
}

type MenuBreakfastItemGroupBy {
  id: [MenuBreakfastItemConnectionId]
  created_at: [MenuBreakfastItemConnectionCreated_at]
  updated_at: [MenuBreakfastItemConnectionUpdated_at]
  item: [MenuBreakfastItemConnectionItem]
  description: [MenuBreakfastItemConnectionDescription]
  price: [MenuBreakfastItemConnectionPrice]
  created_by: [MenuBreakfastItemConnectionCreated_by]
  updated_by: [MenuBreakfastItemConnectionUpdated_by]
}

input MenuBreakfastItemInput {
  item: String
  description: String
  price: Float
  photo: [ID]
  created_by: ID
  updated_by: ID
}

input MenuRegularItemInput {
  item: String
  description: String
  price: Float
  photo: [ID]
  created_by: ID
  updated_by: ID
}

type MenuRegularItems {
  id: ID!
  created_at: DateTime!
  updated_at: DateTime!
  item: String
  description: String
  price: Float
  created_by: AdminUser
  updated_by: AdminUser
  photo(sort: String, limit: Int, start: Int, where: JSON): [UploadFile]
}

type MenuRegularItemsAggregator {
  count: Int
  totalCount: Int
  sum: MenuRegularItemsAggregatorSum
  avg: MenuRegularItemsAggregatorAvg
  min: MenuRegularItemsAggregatorMin
  max: MenuRegularItemsAggregatorMax
}

type MenuRegularItemsAggregatorAvg {
  price: Float
}

type MenuRegularItemsAggregatorMax {
  price: Float
}

type MenuRegularItemsAggregatorMin {
  price: Float
}

type MenuRegularItemsAggregatorSum {
  price: Float
}

type MenuRegularItemsConnection {
  values: [MenuRegularItems]
  groupBy: MenuRegularItemsGroupBy
  aggregate: MenuRegularItemsAggregator
}

type MenuRegularItemsConnectionCreated_at {
  key: DateTime
  connection: MenuRegularItemsConnection
}

type MenuRegularItemsConnectionCreated_by {
  key: ID
  connection: MenuRegularItemsConnection
}

type MenuRegularItemsConnectionDescription {
  key: String
  connection: MenuRegularItemsConnection
}

type MenuRegularItemsConnectionId {
  key: ID
  connection: MenuRegularItemsConnection
}

type MenuRegularItemsConnectionItem {
  key: String
  connection: MenuRegularItemsConnection
}

type MenuRegularItemsConnectionPrice {
  key: Float
  connection: MenuRegularItemsConnection
}

type MenuRegularItemsConnectionUpdated_at {
  key: DateTime
  connection: MenuRegularItemsConnection
}

type MenuRegularItemsConnectionUpdated_by {
  key: ID
  connection: MenuRegularItemsConnection
}

type MenuRegularItemsGroupBy {
  id: [MenuRegularItemsConnectionId]
  created_at: [MenuRegularItemsConnectionCreated_at]
  updated_at: [MenuRegularItemsConnectionUpdated_at]
  item: [MenuRegularItemsConnectionItem]
  description: [MenuRegularItemsConnectionDescription]
  price: [MenuRegularItemsConnectionPrice]
  created_by: [MenuRegularItemsConnectionCreated_by]
  updated_by: [MenuRegularItemsConnectionUpdated_by]
}

union Morph = UsersPermissionsMe | UsersPermissionsMeRole | UsersPermissionsLoginPayload | UserPermissionsPasswordPayload | About | AboutConnection | AboutAggregator | AboutGroupBy | AboutConnectionId | AboutConnectionCreated_at | AboutConnectionUpdated_at | AboutConnectionDescription | AboutConnectionCreated_by | AboutConnectionUpdated_by | createAboutPayload | updateAboutPayload | deleteAboutPayload | Logo | updateLogoPayload | deleteLogoPayload | MenuBreakfastItem | MenuBreakfastItemConnection | MenuBreakfastItemAggregator | MenuBreakfastItemAggregatorSum | MenuBreakfastItemAggregatorAvg | MenuBreakfastItemAggregatorMin | MenuBreakfastItemAggregatorMax | MenuBreakfastItemGroupBy | MenuBreakfastItemConnectionId | MenuBreakfastItemConnectionCreated_at | MenuBreakfastItemConnectionUpdated_at | MenuBreakfastItemConnectionItem | MenuBreakfastItemConnectionDescription | MenuBreakfastItemConnectionPrice | MenuBreakfastItemConnectionCreated_by | MenuBreakfastItemConnectionUpdated_by | createMenuBreakfastItemPayload | updateMenuBreakfastItemPayload | deleteMenuBreakfastItemPayload | MenuRegularItems | MenuRegularItemsConnection | MenuRegularItemsAggregator | MenuRegularItemsAggregatorSum | MenuRegularItemsAggregatorAvg | MenuRegularItemsAggregatorMin | MenuRegularItemsAggregatorMax | MenuRegularItemsGroupBy | MenuRegularItemsConnectionId | MenuRegularItemsConnectionCreated_at | MenuRegularItemsConnectionUpdated_at | MenuRegularItemsConnectionItem | MenuRegularItemsConnectionDescription | MenuRegularItemsConnectionPrice | MenuRegularItemsConnectionCreated_by | MenuRegularItemsConnectionUpdated_by | createMenuRegularItemPayload | updateMenuRegularItemPayload | deleteMenuRegularItemPayload | UploadFile | UploadFileConnection | UploadFileAggregator | UploadFileAggregatorSum | UploadFileAggregatorAvg | UploadFileAggregatorMin | UploadFileAggregatorMax | UploadFileGroupBy | UploadFileConnectionId | UploadFileConnectionCreated_at | UploadFileConnectionUpdated_at | UploadFileConnectionName | UploadFileConnectionAlternativeText | UploadFileConnectionCaption | UploadFileConnectionWidth | UploadFileConnectionHeight | UploadFileConnectionFormats | UploadFileConnectionHash | UploadFileConnectionExt | UploadFileConnectionMime | UploadFileConnectionSize | UploadFileConnectionUrl | UploadFileConnectionPreviewUrl | UploadFileConnectionProvider | UploadFileConnectionProvider_metadata | UploadFileConnectionCreated_by | UploadFileConnectionUpdated_by | UsersPermissionsPermission | UsersPermissionsRole | UsersPermissionsRoleConnection | UsersPermissionsRoleAggregator | UsersPermissionsRoleGroupBy | UsersPermissionsRoleConnectionId | UsersPermissionsRoleConnectionName | UsersPermissionsRoleConnectionDescription | UsersPermissionsRoleConnectionType | UsersPermissionsRoleConnectionCreated_by | UsersPermissionsRoleConnectionUpdated_by | createRolePayload | updateRolePayload | deleteRolePayload | UsersPermissionsUser | UsersPermissionsUserConnection | UsersPermissionsUserAggregator | UsersPermissionsUserGroupBy | UsersPermissionsUserConnectionId | UsersPermissionsUserConnectionCreated_at | UsersPermissionsUserConnectionUpdated_at | UsersPermissionsUserConnectionUsername | UsersPermissionsUserConnectionEmail | UsersPermissionsUserConnectionProvider | UsersPermissionsUserConnectionConfirmed | UsersPermissionsUserConnectionBlocked | UsersPermissionsUserConnectionRole | UsersPermissionsUserConnectionCreated_by | UsersPermissionsUserConnectionUpdated_by | createUserPayload | updateUserPayload | deleteUserPayload

type Mutation {
  createAbout(input: createAboutInput): createAboutPayload
  updateAbout(input: updateAboutInput): updateAboutPayload
  deleteAbout(input: deleteAboutInput): deleteAboutPayload
  updateLogo(input: updateLogoInput): updateLogoPayload
  deleteLogo: deleteLogoPayload
  createMenuBreakfastItem(input: createMenuBreakfastItemInput): createMenuBreakfastItemPayload
  updateMenuBreakfastItem(input: updateMenuBreakfastItemInput): updateMenuBreakfastItemPayload
  deleteMenuBreakfastItem(input: deleteMenuBreakfastItemInput): deleteMenuBreakfastItemPayload
  createMenuRegularItem(input: createMenuRegularItemInput): createMenuRegularItemPayload
  updateMenuRegularItem(input: updateMenuRegularItemInput): updateMenuRegularItemPayload
  deleteMenuRegularItem(input: deleteMenuRegularItemInput): deleteMenuRegularItemPayload

  """Create a new role"""
  createRole(input: createRoleInput): createRolePayload

  """Update an existing role"""
  updateRole(input: updateRoleInput): updateRolePayload

  """Delete an existing role"""
  deleteRole(input: deleteRoleInput): deleteRolePayload

  """Create a new user"""
  createUser(input: createUserInput): createUserPayload

  """Update an existing user"""
  updateUser(input: updateUserInput): updateUserPayload

  """Delete an existing user"""
  deleteUser(input: deleteUserInput): deleteUserPayload
  upload(refId: ID, ref: String, field: String, source: String, file: Upload!): UploadFile!
  multipleUpload(refId: ID, ref: String, field: String, source: String, files: [Upload]!): [UploadFile]!
  updateFileInfo(id: ID!, info: FileInfoInput!): UploadFile!
  login(input: UsersPermissionsLoginInput!): UsersPermissionsLoginPayload!
  register(input: UsersPermissionsRegisterInput!): UsersPermissionsLoginPayload!
  forgotPassword(email: String!): UserPermissionsPasswordPayload
  resetPassword(password: String!, passwordConfirmation: String!, code: String!): UsersPermissionsLoginPayload
  emailConfirmation(confirmation: String!): UsersPermissionsLoginPayload
}

type Query {
  about(id: ID!): About
  abouts(sort: String, limit: Int, start: Int, where: JSON): [About]
  aboutsConnection(sort: String, limit: Int, start: Int, where: JSON): AboutConnection
  logo: Logo
  menuBreakfastItem(id: ID!): MenuBreakfastItem
  menuBreakfastItems(sort: String, limit: Int, start: Int, where: JSON): [MenuBreakfastItem]
  menuBreakfastItemsConnection(sort: String, limit: Int, start: Int, where: JSON): MenuBreakfastItemConnection
  menuRegularItem(id: ID!): MenuRegularItems
  menuRegularItems(sort: String, limit: Int, start: Int, where: JSON): [MenuRegularItems]
  menuRegularItemsConnection(sort: String, limit: Int, start: Int, where: JSON): MenuRegularItemsConnection
  files(sort: String, limit: Int, start: Int, where: JSON): [UploadFile]
  filesConnection(sort: String, limit: Int, start: Int, where: JSON): UploadFileConnection
  role(id: ID!): UsersPermissionsRole

  """
  Retrieve all the existing roles. You can't apply filters on this query.
  """
  roles(sort: String, limit: Int, start: Int, where: JSON): [UsersPermissionsRole]
  rolesConnection(sort: String, limit: Int, start: Int, where: JSON): UsersPermissionsRoleConnection
  user(id: ID!): UsersPermissionsUser
  users(sort: String, limit: Int, start: Int, where: JSON): [UsersPermissionsUser]
  usersConnection(sort: String, limit: Int, start: Int, where: JSON): UsersPermissionsUserConnection
  me: UsersPermissionsMe
}

input RoleInput {
  name: String!
  description: String
  type: String
  permissions: [ID]
  users: [ID]
  created_by: ID
  updated_by: ID
}

"""A time string with format: HH:mm:ss.SSS"""
scalar Time

input updateAboutInput {
  where: InputID
  data: editAboutInput
}

type updateAboutPayload {
  about: About
}

input updateLogoInput {
  data: editLogoInput
}

type updateLogoPayload {
  logo: Logo
}

input updateMenuBreakfastItemInput {
  where: InputID
  data: editMenuBreakfastItemInput
}

type updateMenuBreakfastItemPayload {
  menuBreakfastItem: MenuBreakfastItem
}

input updateMenuRegularItemInput {
  where: InputID
  data: editMenuRegularItemInput
}

type updateMenuRegularItemPayload {
  menuRegularItem: MenuRegularItems
}

input updateRoleInput {
  where: InputID
  data: editRoleInput
}

type updateRolePayload {
  role: UsersPermissionsRole
}

input updateUserInput {
  where: InputID
  data: editUserInput
}

type updateUserPayload {
  user: UsersPermissionsUser
}

"""The `Upload` scalar type represents a file upload."""
scalar Upload

type UploadFile {
  id: ID!
  created_at: DateTime!
  updated_at: DateTime!
  name: String!
  alternativeText: String
  caption: String
  width: Int
  height: Int
  formats: JSON
  hash: String!
  ext: String
  mime: String!
  size: Float!
  url: String!
  previewUrl: String
  provider: String!
  provider_metadata: JSON
  created_by: AdminUser
  updated_by: AdminUser
  related(sort: String, limit: Int, start: Int, where: JSON): [Morph]
}

type UploadFileAggregator {
  count: Int
  totalCount: Int
  sum: UploadFileAggregatorSum
  avg: UploadFileAggregatorAvg
  min: UploadFileAggregatorMin
  max: UploadFileAggregatorMax
}

type UploadFileAggregatorAvg {
  width: Float
  height: Float
  size: Float
}

type UploadFileAggregatorMax {
  width: Float
  height: Float
  size: Float
}

type UploadFileAggregatorMin {
  width: Float
  height: Float
  size: Float
}

type UploadFileAggregatorSum {
  width: Float
  height: Float
  size: Float
}

type UploadFileConnection {
  values: [UploadFile]
  groupBy: UploadFileGroupBy
  aggregate: UploadFileAggregator
}

type UploadFileConnectionAlternativeText {
  key: String
  connection: UploadFileConnection
}

type UploadFileConnectionCaption {
  key: String
  connection: UploadFileConnection
}

type UploadFileConnectionCreated_at {
  key: DateTime
  connection: UploadFileConnection
}

type UploadFileConnectionCreated_by {
  key: ID
  connection: UploadFileConnection
}

type UploadFileConnectionExt {
  key: String
  connection: UploadFileConnection
}

type UploadFileConnectionFormats {
  key: JSON
  connection: UploadFileConnection
}

type UploadFileConnectionHash {
  key: String
  connection: UploadFileConnection
}

type UploadFileConnectionHeight {
  key: Int
  connection: UploadFileConnection
}

type UploadFileConnectionId {
  key: ID
  connection: UploadFileConnection
}

type UploadFileConnectionMime {
  key: String
  connection: UploadFileConnection
}

type UploadFileConnectionName {
  key: String
  connection: UploadFileConnection
}

type UploadFileConnectionPreviewUrl {
  key: String
  connection: UploadFileConnection
}

type UploadFileConnectionProvider {
  key: String
  connection: UploadFileConnection
}

type UploadFileConnectionProvider_metadata {
  key: JSON
  connection: UploadFileConnection
}

type UploadFileConnectionSize {
  key: Float
  connection: UploadFileConnection
}

type UploadFileConnectionUpdated_at {
  key: DateTime
  connection: UploadFileConnection
}

type UploadFileConnectionUpdated_by {
  key: ID
  connection: UploadFileConnection
}

type UploadFileConnectionUrl {
  key: String
  connection: UploadFileConnection
}

type UploadFileConnectionWidth {
  key: Int
  connection: UploadFileConnection
}

type UploadFileGroupBy {
  id: [UploadFileConnectionId]
  created_at: [UploadFileConnectionCreated_at]
  updated_at: [UploadFileConnectionUpdated_at]
  name: [UploadFileConnectionName]
  alternativeText: [UploadFileConnectionAlternativeText]
  caption: [UploadFileConnectionCaption]
  width: [UploadFileConnectionWidth]
  height: [UploadFileConnectionHeight]
  formats: [UploadFileConnectionFormats]
  hash: [UploadFileConnectionHash]
  ext: [UploadFileConnectionExt]
  mime: [UploadFileConnectionMime]
  size: [UploadFileConnectionSize]
  url: [UploadFileConnectionUrl]
  previewUrl: [UploadFileConnectionPreviewUrl]
  provider: [UploadFileConnectionProvider]
  provider_metadata: [UploadFileConnectionProvider_metadata]
  created_by: [UploadFileConnectionCreated_by]
  updated_by: [UploadFileConnectionUpdated_by]
}

input UserInput {
  username: String!
  email: String!
  provider: String
  password: String
  resetPasswordToken: String
  confirmed: Boolean
  blocked: Boolean
  role: ID
  created_by: ID
  updated_by: ID
}

type UserPermissionsPasswordPayload {
  ok: Boolean!
}

input UsersPermissionsLoginInput {
  identifier: String!
  password: String!
  provider: String = "local"
}

type UsersPermissionsLoginPayload {
  jwt: String
  user: UsersPermissionsMe!
}

type UsersPermissionsMe {
  id: ID!
  username: String!
  email: String!
  confirmed: Boolean
  blocked: Boolean
  role: UsersPermissionsMeRole
}

type UsersPermissionsMeRole {
  id: ID!
  name: String!
  description: String
  type: String
}

type UsersPermissionsPermission {
  id: ID!
  type: String!
  controller: String!
  action: String!
  enabled: Boolean!
  policy: String
  role: UsersPermissionsRole
  created_by: AdminUser
  updated_by: AdminUser
}

input UsersPermissionsRegisterInput {
  username: String!
  email: String!
  password: String!
}

type UsersPermissionsRole {
  id: ID!
  name: String!
  description: String
  type: String
  created_by: AdminUser
  updated_by: AdminUser
  permissions(sort: String, limit: Int, start: Int, where: JSON): [UsersPermissionsPermission]
  users(sort: String, limit: Int, start: Int, where: JSON): [UsersPermissionsUser]
}

type UsersPermissionsRoleAggregator {
  count: Int
  totalCount: Int
}

type UsersPermissionsRoleConnection {
  values: [UsersPermissionsRole]
  groupBy: UsersPermissionsRoleGroupBy
  aggregate: UsersPermissionsRoleAggregator
}

type UsersPermissionsRoleConnectionCreated_by {
  key: ID
  connection: UsersPermissionsRoleConnection
}

type UsersPermissionsRoleConnectionDescription {
  key: String
  connection: UsersPermissionsRoleConnection
}

type UsersPermissionsRoleConnectionId {
  key: ID
  connection: UsersPermissionsRoleConnection
}

type UsersPermissionsRoleConnectionName {
  key: String
  connection: UsersPermissionsRoleConnection
}

type UsersPermissionsRoleConnectionType {
  key: String
  connection: UsersPermissionsRoleConnection
}

type UsersPermissionsRoleConnectionUpdated_by {
  key: ID
  connection: UsersPermissionsRoleConnection
}

type UsersPermissionsRoleGroupBy {
  id: [UsersPermissionsRoleConnectionId]
  name: [UsersPermissionsRoleConnectionName]
  description: [UsersPermissionsRoleConnectionDescription]
  type: [UsersPermissionsRoleConnectionType]
  created_by: [UsersPermissionsRoleConnectionCreated_by]
  updated_by: [UsersPermissionsRoleConnectionUpdated_by]
}

type UsersPermissionsUser {
  id: ID!
  created_at: DateTime!
  updated_at: DateTime!
  username: String!
  email: String!
  provider: String
  confirmed: Boolean
  blocked: Boolean
  role: UsersPermissionsRole
  created_by: AdminUser
  updated_by: AdminUser
}

type UsersPermissionsUserAggregator {
  count: Int
  totalCount: Int
}

type UsersPermissionsUserConnection {
  values: [UsersPermissionsUser]
  groupBy: UsersPermissionsUserGroupBy
  aggregate: UsersPermissionsUserAggregator
}

type UsersPermissionsUserConnectionBlocked {
  key: Boolean
  connection: UsersPermissionsUserConnection
}

type UsersPermissionsUserConnectionConfirmed {
  key: Boolean
  connection: UsersPermissionsUserConnection
}

type UsersPermissionsUserConnectionCreated_at {
  key: DateTime
  connection: UsersPermissionsUserConnection
}

type UsersPermissionsUserConnectionCreated_by {
  key: ID
  connection: UsersPermissionsUserConnection
}

type UsersPermissionsUserConnectionEmail {
  key: String
  connection: UsersPermissionsUserConnection
}

type UsersPermissionsUserConnectionId {
  key: ID
  connection: UsersPermissionsUserConnection
}

type UsersPermissionsUserConnectionProvider {
  key: String
  connection: UsersPermissionsUserConnection
}

type UsersPermissionsUserConnectionRole {
  key: ID
  connection: UsersPermissionsUserConnection
}

type UsersPermissionsUserConnectionUpdated_at {
  key: DateTime
  connection: UsersPermissionsUserConnection
}

type UsersPermissionsUserConnectionUpdated_by {
  key: ID
  connection: UsersPermissionsUserConnection
}

type UsersPermissionsUserConnectionUsername {
  key: String
  connection: UsersPermissionsUserConnection
}

type UsersPermissionsUserGroupBy {
  id: [UsersPermissionsUserConnectionId]
  created_at: [UsersPermissionsUserConnectionCreated_at]
  updated_at: [UsersPermissionsUserConnectionUpdated_at]
  username: [UsersPermissionsUserConnectionUsername]
  email: [UsersPermissionsUserConnectionEmail]
  provider: [UsersPermissionsUserConnectionProvider]
  confirmed: [UsersPermissionsUserConnectionConfirmed]
  blocked: [UsersPermissionsUserConnectionBlocked]
  role: [UsersPermissionsUserConnectionRole]
  created_by: [UsersPermissionsUserConnectionCreated_by]
  updated_by: [UsersPermissionsUserConnectionUpdated_by]
}
